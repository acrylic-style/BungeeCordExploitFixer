package xyz.acrylicstyle.bcExploitFixer.reflector;

import util.reflector.Reflector;
import util.reflector.ReflectorHandler;

import java.lang.reflect.InvocationTargetException;

// a reflector class to access VirtualMachine class
public interface VirtualMachine {
    static VirtualMachine getInstance(Object o) {
        try {
            return Reflector.newReflector(null, VirtualMachine.class, new ReflectorHandler(Class.forName("com.sun.tools.attach.VirtualMachine", true, Reflector.classLoader), o));
        } catch (ClassNotFoundException e) {
            throw new RuntimeException(e);
        }
    }

    static VirtualMachine attach(String id) {
        try {
            Object o = Class.forName("com.sun.tools.attach.VirtualMachine", true, Reflector.classLoader).getMethod("attach", String.class).invoke(null, id);
            return getInstance(o);
        } catch (ClassNotFoundException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
            throw new RuntimeException(e);
        }
    }

    void loadAgent(String agentPath);

    void detach();
}
