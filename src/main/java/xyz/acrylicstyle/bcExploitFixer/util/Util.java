package xyz.acrylicstyle.bcExploitFixer.util;

import javassist.CtClass;
import javassist.CtConstructor;
import javassist.NotFoundException;

public class Util {
    public static Result<CtConstructor> getOrCreateConstructor(CtClass[] params, CtClass declaringClass) {
        try {
            return new Result<>(declaringClass.getDeclaredConstructor(params), false);
        } catch (NotFoundException e) {
            return new Result<>(new CtConstructor(params, declaringClass), true);
        }
    }

    public static void runConstructor(CtClass[] params, CtClass declaringClass, ThrowableConsumer<CtConstructor> onModify, ThrowableConsumer<CtConstructor> onCreate) {
        Result<CtConstructor> result = getOrCreateConstructor(params, declaringClass);
        if (result.isCreated()) {
            try {
                onCreate.accept(result.getValue());
            } catch (Throwable throwable) {
                throw new RuntimeException(throwable);
            }
        } else {
            try {
                onModify.accept(result.getValue());
            } catch (Throwable throwable) {
                throw new RuntimeException(throwable);
            }
        }
    }

    public static void runIfNewConstructor(CtClass[] params, CtClass declaringClass, ThrowableConsumer<CtConstructor> action) {
        Result<CtConstructor> result = getOrCreateConstructor(params, declaringClass);
        if (result.isCreated()) {
            try {
                action.accept(result.getValue());
            } catch (Throwable throwable) {
                throw new RuntimeException(throwable);
            }
        }
    }

    public static class Result<T> {
        private final T value;
        private final boolean created;

        public Result(T value, boolean created) {
            this.value = value;
            this.created = created;
        }

        public T getValue() {
            return value;
        }

        public boolean isCreated() {
            return created;
        }
    }
}
