package xyz.acrylicstyle.bcExploitFixer.cl;

import io.github.waterfallmc.waterfall.event.ConnectionInitEvent;
import io.netty.channel.Channel;
import io.netty.handler.codec.haproxy.HAProxyMessageDecoder;
import net.md_5.bungee.BungeeCord;
import net.md_5.bungee.api.ProxyServer;
import net.md_5.bungee.api.config.ListenerInfo;
import net.md_5.bungee.connection.InitialHandler;
import net.md_5.bungee.netty.HandlerBoss;
import net.md_5.bungee.netty.PipelineUtils;
import net.md_5.bungee.protocol.KickStringWriter;
import net.md_5.bungee.protocol.LegacyDecoder;
import net.md_5.bungee.protocol.MinecraftDecoder;
import net.md_5.bungee.protocol.MinecraftEncoder;
import net.md_5.bungee.protocol.Protocol;

@SuppressWarnings("unused")
public class PipelineUtils_1 {
    public static void invoke(Channel ch, ListenerInfo listener, KickStringWriter legacyKicker, PipelineUtils.Base base) {
        ConnectionInitEvent connectionInitEvent = new ConnectionInitEvent(ch.remoteAddress(), listener, (result, throwable) -> {
            if (result.isCancelled()) {
                ch.close();
                return;
            }
            try {
                base.initChannel( ch );
            } catch (Exception e) {
                e.printStackTrace();
                ch.close();
                return;
            }
            ch.pipeline().addBefore(PipelineUtils.FRAME_DECODER, PipelineUtils.LEGACY_DECODER, new LegacyDecoder());
            ch.pipeline().addAfter(PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder(Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion()));
            ch.pipeline().addAfter(PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder(Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion()));
            ch.pipeline().addBefore(PipelineUtils.FRAME_PREPENDER, PipelineUtils.LEGACY_KICKER, legacyKicker );
            ch.pipeline().get(HandlerBoss.class).setHandler(new InitialHandler(BungeeCord.getInstance(), listener));

            if (listener.isProxyProtocol()) {
                ch.pipeline().addFirst( new HAProxyMessageDecoder() );
            }
        });
        BungeeCord.getInstance().getPluginManager().callEvent(connectionInitEvent);
    }
}
