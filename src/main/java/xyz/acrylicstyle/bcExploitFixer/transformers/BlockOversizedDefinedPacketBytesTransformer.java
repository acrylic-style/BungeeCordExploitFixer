package xyz.acrylicstyle.bcExploitFixer.transformers;

import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtField;
import javassist.CtMethod;
import xyz.acrylicstyle.bcExploitFixer.BungeeCordExploitFixer;

import java.lang.instrument.ClassFileTransformer;
import java.security.ProtectionDomain;

import static xyz.acrylicstyle.bcExploitFixer.BungeeCordExploitFixer.info;

public class BlockOversizedDefinedPacketBytesTransformer implements ClassFileTransformer {
    public int transformed = 0;
    public final int max = 1;
    public static final boolean DEBUG = Boolean.getBoolean("waterfall.packet-decode-logging") || BungeeCordExploitFixer.debug;

    @Override
    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {
        if (!className.equals("net/md_5/bungee/protocol/DefinedPacket")) return null;
        try {
            ClassPool cp = ClassPool.getDefault();
            CtClass cc = cp.get(className.replace("/", "."));
            if (className.equals("net/md_5/bungee/protocol/DefinedPacket")) {
                cc.addField(CtField.make("private static final net.md_5.bungee.protocol.OverflowPacketException _BYTE_ARRAY_TOO_MANY_BYTES_EXCEPTION = new net.md_5.bungee.protocol.OverflowPacketException(\"A byte array had more data than allowed. For more information, launch BungeeCordExploitFixer with --debug\");", cc));
                CtMethod method = cc.getDeclaredMethod("readArray", new CtClass[]{ cp.get("io.netty.buffer.ByteBuf"), CtClass.intType });
                method.setBody("{\n" +
                        "        int len = readVarInt( $1 );\n" +
                        "        if ( len > $2 )\n" +
                        "        {\n" +
                        "            if (" + (!DEBUG) + ") throw _BYTE_ARRAY_TOO_MANY_BYTES_EXCEPTION;\n" +
                        "            throw new net.md_5.bungee.protocol.OverflowPacketException( String.format( \"Cannot receive byte array longer than %s (got %s bytes)\", new Object[]{ Integer.valueOf($2), Integer.valueOf(len) }) );\n" +
                        "        }\n" +
                        "        byte[] ret = new byte[ len ];\n" +
                        "        $1.readBytes( ret );\n" +
                        "        return ret;\n" +
                        "}");
            }
            byte[] buf = cc.toBytecode();
            cc.detach();
            info("Transformed " + className, ++transformed, max);
            return buf;
        } catch (Throwable e) {
            info("encountered error during transforming " + className + " - " + e.getClass().getSimpleName() + ": " + e.getMessage());
            e.printStackTrace(System.out);
            throw new RuntimeException(e);
        }
    }
}
